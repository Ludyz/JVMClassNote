JVM虚拟机：hotspot JRockit ,IBM J9
类的加载过程
加载loading->链接link（验证Verification->准备prepare->解析resolution)->初始化initialization
加载：把class字节码文件加载刀JVM内存中
1）通过一个类的全限定名获取此类的二进制文件流（加载.class字节码文件，硬盘、jar包、war包、远程仓库等）
2）将字节流所代表的静态存储结构转化为方法区（jdk8原空间）的运行时数据结构
3）在内存中生成一个代表这个类的java.lang.Class对象(可以反射出来)，作为方法区这个类的各种数据的入口
链接：
    验证：验证载入的类是否符合JVM规范
        确保class文件的字节流文件中包含的信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全
        ，主要四种验证方法：文件格式验证，元数据验证，字节码验证，符号引用验证
    准备：为类变量分配内存空间，实例变量还未初始化，它的值为默认值为0，但final static 修饰的变量的值会在这时初始化
    解析：把常量池中所有的符号引用转为直接引用
初始化：
<clinit> 用来初始化static代码,给static变量赋值，static代码执行顺序按代码出现的先后顺序，不包含static则没有<clinit>,
子类在加载之前会保证父类加载加载完成，static代码块只会加载一次
创建对象时，<init>调用构造器方法，子类在调用构造器前会先调用父类的构造器

加载器的分类
启动类加载器（也叫引导类加载器，BootStrapClassLoader）:它是c/c++语言编写的，用来加载java的核心类库（JAVA_HOME/jre.lib/下的rt.jar,resources.jar,charsets.har和class，用于提供JVM所需要
的自身类库，加载扩展类（ExtClassLoader）和应用程序(AppClassLoader)加载器，它只能加载固定路径的类，如包名为java,javax,sun等开头的类，注意可以通过启动jvm时指定Xbootclasspath和
改变BootstrapClassLoader的加载目录，它是扩展类和系统类加载器的父类加载器
扩展类加载器：加载%JRE_HOME%/lib/ext目录下的jar包和class文件，还可以加载-D java.ext.dirs选项指定目录，父类加载器为启动类加载器
系统类加载器（AppClassLoader也称SystemAppClass）加载当前应用的classpath的所有类，他是程序中的默认加载器
用户自定义类加载器：程序员自己定制类的加载方式，
    使用自定义加载类的原应：隔离加载类（避免引入的jar包之间有冲突，框架中就使用了），修改类加载的方式，
                            扩展加载源（通过网络、数据库或其他途径加载字节码文件），
                            防止源码泄露（对字节码文件进行加密，加载字节码文件时在进行解密），用来保护源文件
自定义类加载器的步骤
1）继承ClassLoader或UrlClassLoader
2)jdk1.2之前要重写loadClass()方法，之后只要重写findClass()方法，对于解密操作可以在读取字节码文件的二进制流中进行解密
*********它们之间没有继承关系，它们是包含关系，采用的是双亲委派模式

双亲委派机制:
1)如果一个类收到了类加载器请求，并不会自己先去加载，而是把这个请求委托给父类加载器进行加载
2）如果父类加载器还存在父类加载器，依次递归，请求最终将到达顶层的启动类加载器
3）如果父类加载器可以完成此类的加载任务，就返回成功，倘若父类加载器无法完成此类加载任务，子加载器才会尝试自己
去加载，这就是双亲委派模式
双亲委派机制优势：
1）避免类的重复加载
2）保护程序安全，防止核心API被随意篡改
沙箱安全机制：用来保护java核心代码库

JVM中两个class对象是否为同一个类存在的必要条件：
1）类的完整类名必须一致，包括包名
2）加载这个类的ClassLoader必须相同（类在加载到内存中时，会将这个类的加载器的一个引用作为类型信息的一部分保存在方法区），
当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载器是相同的

java程序对类的使用方法：主动使用和被动使用（它们的区别是是否有初始化阶段：<clinit>和<init>）
主动使用有七种情况：
1）创建类的实例
2）访问某个类或接口的静态变量，或者对该静态变量赋值
3）调用类的静态方法
4)反射（Class.forName("类路径")）
5）初始化一个类的子类
6）java虚拟机启动时被标明为启动类的类
7）jdk7开始提供的动态语言支持
除了以上七种情况，其它使用java类的方式都被看做是类的被动使用，都不会
导致类的初始化


